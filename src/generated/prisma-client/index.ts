// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  entry: (where?: EntryWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  entry: (where: EntryWhereUniqueInput) => EntryPromise;
  entries: (
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Entry>;
  entriesConnection: (
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EntryConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectPromise;
  projects: (
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Project>;
  projectsConnection: (
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProjectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEntry: (data: EntryCreateInput) => EntryPromise;
  updateEntry: (
    args: { data: EntryUpdateInput; where: EntryWhereUniqueInput }
  ) => EntryPromise;
  updateManyEntries: (
    args: { data: EntryUpdateManyMutationInput; where?: EntryWhereInput }
  ) => BatchPayloadPromise;
  upsertEntry: (
    args: {
      where: EntryWhereUniqueInput;
      create: EntryCreateInput;
      update: EntryUpdateInput;
    }
  ) => EntryPromise;
  deleteEntry: (where: EntryWhereUniqueInput) => EntryPromise;
  deleteManyEntries: (where?: EntryWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (
    args: { data: ProjectUpdateInput; where: ProjectWhereUniqueInput }
  ) => ProjectPromise;
  updateManyProjects: (
    args: { data: ProjectUpdateManyMutationInput; where?: ProjectWhereInput }
  ) => BatchPayloadPromise;
  upsertProject: (
    args: {
      where: ProjectWhereUniqueInput;
      create: ProjectCreateInput;
      update: ProjectUpdateInput;
    }
  ) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  entry: (
    where?: EntrySubscriptionWhereInput
  ) => EntrySubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Roles = "Owner" | "Admin" | "Employee";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EntryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "entryDate_ASC"
  | "entryDate_DESC"
  | "receiptDate_ASC"
  | "receiptDate_DESC"
  | "receiptNumber_ASC"
  | "receiptNumber_DESC"
  | "receipt_ASC"
  | "receipt_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutProjectsDataInput;
}

export type EntryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  receiptNumber?: String;
}>;

export interface EntryUpdateWithWhereUniqueWithoutCreatedByInput {
  where: EntryWhereUniqueInput;
  data: EntryUpdateWithoutCreatedByDataInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  role?: Roles;
  role_not?: Roles;
  role_in?: Roles[] | Roles;
  role_not_in?: Roles[] | Roles;
  entries_every?: EntryWhereInput;
  entries_some?: EntryWhereInput;
  entries_none?: EntryWhereInput;
  projects_every?: ProjectWhereInput;
  projects_some?: ProjectWhereInput;
  projects_none?: ProjectWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface EntryUpdateWithoutCreatedByDataInput {
  subject?: String;
  amount?: Float;
  currency?: String;
  entryDate?: DateTimeInput;
  receiptDate?: DateTimeInput;
  receiptNumber?: String;
  project?: ProjectUpdateOneRequiredWithoutEntriesInput;
  receipt?: String;
  comment?: String;
}

export interface EntryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  subject?: String;
  subject_not?: String;
  subject_in?: String[] | String;
  subject_not_in?: String[] | String;
  subject_lt?: String;
  subject_lte?: String;
  subject_gt?: String;
  subject_gte?: String;
  subject_contains?: String;
  subject_not_contains?: String;
  subject_starts_with?: String;
  subject_not_starts_with?: String;
  subject_ends_with?: String;
  subject_not_ends_with?: String;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  currency?: String;
  currency_not?: String;
  currency_in?: String[] | String;
  currency_not_in?: String[] | String;
  currency_lt?: String;
  currency_lte?: String;
  currency_gt?: String;
  currency_gte?: String;
  currency_contains?: String;
  currency_not_contains?: String;
  currency_starts_with?: String;
  currency_not_starts_with?: String;
  currency_ends_with?: String;
  currency_not_ends_with?: String;
  entryDate?: DateTimeInput;
  entryDate_not?: DateTimeInput;
  entryDate_in?: DateTimeInput[] | DateTimeInput;
  entryDate_not_in?: DateTimeInput[] | DateTimeInput;
  entryDate_lt?: DateTimeInput;
  entryDate_lte?: DateTimeInput;
  entryDate_gt?: DateTimeInput;
  entryDate_gte?: DateTimeInput;
  receiptDate?: DateTimeInput;
  receiptDate_not?: DateTimeInput;
  receiptDate_in?: DateTimeInput[] | DateTimeInput;
  receiptDate_not_in?: DateTimeInput[] | DateTimeInput;
  receiptDate_lt?: DateTimeInput;
  receiptDate_lte?: DateTimeInput;
  receiptDate_gt?: DateTimeInput;
  receiptDate_gte?: DateTimeInput;
  receiptNumber?: String;
  receiptNumber_not?: String;
  receiptNumber_in?: String[] | String;
  receiptNumber_not_in?: String[] | String;
  receiptNumber_lt?: String;
  receiptNumber_lte?: String;
  receiptNumber_gt?: String;
  receiptNumber_gte?: String;
  receiptNumber_contains?: String;
  receiptNumber_not_contains?: String;
  receiptNumber_starts_with?: String;
  receiptNumber_not_starts_with?: String;
  receiptNumber_ends_with?: String;
  receiptNumber_not_ends_with?: String;
  project?: ProjectWhereInput;
  receipt?: String;
  receipt_not?: String;
  receipt_in?: String[] | String;
  receipt_not_in?: String[] | String;
  receipt_lt?: String;
  receipt_lte?: String;
  receipt_gt?: String;
  receipt_gte?: String;
  receipt_contains?: String;
  receipt_not_contains?: String;
  receipt_starts_with?: String;
  receipt_not_starts_with?: String;
  receipt_ends_with?: String;
  receipt_not_ends_with?: String;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  createdBy?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: EntryWhereInput[] | EntryWhereInput;
  OR?: EntryWhereInput[] | EntryWhereInput;
  NOT?: EntryWhereInput[] | EntryWhereInput;
}

export interface ProjectCreateWithoutUsersInput {
  name: String;
  entries?: EntryCreateManyWithoutProjectInput;
}

export interface EntryUpdateWithWhereUniqueWithoutProjectInput {
  where: EntryWhereUniqueInput;
  data: EntryUpdateWithoutProjectDataInput;
}

export interface EntryCreateManyWithoutProjectInput {
  create?: EntryCreateWithoutProjectInput[] | EntryCreateWithoutProjectInput;
  connect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
}

export interface EntryUpsertWithWhereUniqueWithoutCreatedByInput {
  where: EntryWhereUniqueInput;
  update: EntryUpdateWithoutCreatedByDataInput;
  create: EntryCreateWithoutCreatedByInput;
}

export interface EntryCreateWithoutProjectInput {
  subject: String;
  amount: Float;
  currency?: String;
  entryDate: DateTimeInput;
  receiptDate: DateTimeInput;
  receiptNumber: String;
  receipt?: String;
  comment?: String;
  createdBy: UserCreateOneWithoutEntriesInput;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProjectWhereInput;
  AND?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  OR?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  NOT?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
}

export interface EntryUpdateInput {
  subject?: String;
  amount?: Float;
  currency?: String;
  entryDate?: DateTimeInput;
  receiptDate?: DateTimeInput;
  receiptNumber?: String;
  project?: ProjectUpdateOneRequiredWithoutEntriesInput;
  receipt?: String;
  comment?: String;
  createdBy?: UserUpdateOneRequiredWithoutEntriesInput;
}

export interface UserUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  role?: Roles;
}

export interface ProjectUpdateOneRequiredWithoutEntriesInput {
  create?: ProjectCreateWithoutEntriesInput;
  update?: ProjectUpdateWithoutEntriesDataInput;
  upsert?: ProjectUpsertWithoutEntriesInput;
  connect?: ProjectWhereUniqueInput;
}

export interface UserCreateInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  role: Roles;
  entries?: EntryCreateManyWithoutCreatedByInput;
  projects?: ProjectCreateManyWithoutUsersInput;
}

export interface ProjectUpdateWithoutEntriesDataInput {
  name?: String;
  users?: UserUpdateManyWithoutProjectsInput;
}

export interface ProjectUpdateInput {
  name?: String;
  users?: UserUpdateManyWithoutProjectsInput;
  entries?: EntryUpdateManyWithoutProjectInput;
}

export interface UserUpdateManyWithoutProjectsInput {
  create?: UserCreateWithoutProjectsInput[] | UserCreateWithoutProjectsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutProjectsInput[]
    | UserUpdateWithWhereUniqueWithoutProjectsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutProjectsInput[]
    | UserUpsertWithWhereUniqueWithoutProjectsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface ProjectCreateInput {
  name: String;
  users?: UserCreateManyWithoutProjectsInput;
  entries?: EntryCreateManyWithoutProjectInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutUsersInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutUsersDataInput;
  create: ProjectCreateWithoutUsersInput;
}

export interface UserUpsertWithoutEntriesInput {
  update: UserUpdateWithoutEntriesDataInput;
  create: UserCreateWithoutEntriesInput;
}

export interface UserUpdateWithoutProjectsDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  role?: Roles;
  entries?: EntryUpdateManyWithoutCreatedByInput;
}

export interface ProjectUpdateManyDataInput {
  name?: String;
}

export interface EntryUpdateManyWithoutCreatedByInput {
  create?:
    | EntryCreateWithoutCreatedByInput[]
    | EntryCreateWithoutCreatedByInput;
  delete?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  connect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  disconnect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  update?:
    | EntryUpdateWithWhereUniqueWithoutCreatedByInput[]
    | EntryUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | EntryUpsertWithWhereUniqueWithoutCreatedByInput[]
    | EntryUpsertWithWhereUniqueWithoutCreatedByInput;
  deleteMany?: EntryScalarWhereInput[] | EntryScalarWhereInput;
  updateMany?:
    | EntryUpdateManyWithWhereNestedInput[]
    | EntryUpdateManyWithWhereNestedInput;
}

export interface ProjectScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  OR?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  NOT?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
}

export interface EntryUpsertWithWhereUniqueWithoutProjectInput {
  where: EntryWhereUniqueInput;
  update: EntryUpdateWithoutProjectDataInput;
  create: EntryCreateWithoutProjectInput;
}

export interface EntryCreateInput {
  subject: String;
  amount: Float;
  currency?: String;
  entryDate: DateTimeInput;
  receiptDate: DateTimeInput;
  receiptNumber: String;
  project: ProjectCreateOneWithoutEntriesInput;
  receipt?: String;
  comment?: String;
  createdBy: UserCreateOneWithoutEntriesInput;
}

export interface ProjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  entries_every?: EntryWhereInput;
  entries_some?: EntryWhereInput;
  entries_none?: EntryWhereInput;
  AND?: ProjectWhereInput[] | ProjectWhereInput;
  OR?: ProjectWhereInput[] | ProjectWhereInput;
  NOT?: ProjectWhereInput[] | ProjectWhereInput;
}

export interface ProjectCreateWithoutEntriesInput {
  name: String;
  users?: UserCreateManyWithoutProjectsInput;
}

export interface EntryUpdateWithoutProjectDataInput {
  subject?: String;
  amount?: Float;
  currency?: String;
  entryDate?: DateTimeInput;
  receiptDate?: DateTimeInput;
  receiptNumber?: String;
  receipt?: String;
  comment?: String;
  createdBy?: UserUpdateOneRequiredWithoutEntriesInput;
}

export interface UserCreateWithoutProjectsInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  role: Roles;
  entries?: EntryCreateManyWithoutCreatedByInput;
}

export interface EntryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  subject?: String;
  subject_not?: String;
  subject_in?: String[] | String;
  subject_not_in?: String[] | String;
  subject_lt?: String;
  subject_lte?: String;
  subject_gt?: String;
  subject_gte?: String;
  subject_contains?: String;
  subject_not_contains?: String;
  subject_starts_with?: String;
  subject_not_starts_with?: String;
  subject_ends_with?: String;
  subject_not_ends_with?: String;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  currency?: String;
  currency_not?: String;
  currency_in?: String[] | String;
  currency_not_in?: String[] | String;
  currency_lt?: String;
  currency_lte?: String;
  currency_gt?: String;
  currency_gte?: String;
  currency_contains?: String;
  currency_not_contains?: String;
  currency_starts_with?: String;
  currency_not_starts_with?: String;
  currency_ends_with?: String;
  currency_not_ends_with?: String;
  entryDate?: DateTimeInput;
  entryDate_not?: DateTimeInput;
  entryDate_in?: DateTimeInput[] | DateTimeInput;
  entryDate_not_in?: DateTimeInput[] | DateTimeInput;
  entryDate_lt?: DateTimeInput;
  entryDate_lte?: DateTimeInput;
  entryDate_gt?: DateTimeInput;
  entryDate_gte?: DateTimeInput;
  receiptDate?: DateTimeInput;
  receiptDate_not?: DateTimeInput;
  receiptDate_in?: DateTimeInput[] | DateTimeInput;
  receiptDate_not_in?: DateTimeInput[] | DateTimeInput;
  receiptDate_lt?: DateTimeInput;
  receiptDate_lte?: DateTimeInput;
  receiptDate_gt?: DateTimeInput;
  receiptDate_gte?: DateTimeInput;
  receiptNumber?: String;
  receiptNumber_not?: String;
  receiptNumber_in?: String[] | String;
  receiptNumber_not_in?: String[] | String;
  receiptNumber_lt?: String;
  receiptNumber_lte?: String;
  receiptNumber_gt?: String;
  receiptNumber_gte?: String;
  receiptNumber_contains?: String;
  receiptNumber_not_contains?: String;
  receiptNumber_starts_with?: String;
  receiptNumber_not_starts_with?: String;
  receiptNumber_ends_with?: String;
  receiptNumber_not_ends_with?: String;
  receipt?: String;
  receipt_not?: String;
  receipt_in?: String[] | String;
  receipt_not_in?: String[] | String;
  receipt_lt?: String;
  receipt_lte?: String;
  receipt_gt?: String;
  receipt_gte?: String;
  receipt_contains?: String;
  receipt_not_contains?: String;
  receipt_starts_with?: String;
  receipt_not_starts_with?: String;
  receipt_ends_with?: String;
  receipt_not_ends_with?: String;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: EntryScalarWhereInput[] | EntryScalarWhereInput;
  OR?: EntryScalarWhereInput[] | EntryScalarWhereInput;
  NOT?: EntryScalarWhereInput[] | EntryScalarWhereInput;
}

export interface EntryCreateWithoutCreatedByInput {
  subject: String;
  amount: Float;
  currency?: String;
  entryDate: DateTimeInput;
  receiptDate: DateTimeInput;
  receiptNumber: String;
  project: ProjectCreateOneWithoutEntriesInput;
  receipt?: String;
  comment?: String;
}

export interface EntryUpdateManyWithWhereNestedInput {
  where: EntryScalarWhereInput;
  data: EntryUpdateManyDataInput;
}

export interface UserCreateWithoutEntriesInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  role: Roles;
  projects?: ProjectCreateManyWithoutUsersInput;
}

export interface EntryUpdateManyDataInput {
  subject?: String;
  amount?: Float;
  currency?: String;
  entryDate?: DateTimeInput;
  receiptDate?: DateTimeInput;
  receiptNumber?: String;
  receipt?: String;
  comment?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpsertWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutProjectsDataInput;
  create: UserCreateWithoutProjectsInput;
}

export interface UserUpdateInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  role?: Roles;
  entries?: EntryUpdateManyWithoutCreatedByInput;
  projects?: ProjectUpdateManyWithoutUsersInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  role?: Roles;
  role_not?: Roles;
  role_in?: Roles[] | Roles;
  role_not_in?: Roles[] | Roles;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserUpdateManyDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  role?: Roles;
}

export interface UserCreateManyWithoutProjectsInput {
  create?: UserCreateWithoutProjectsInput[] | UserCreateWithoutProjectsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface ProjectUpsertWithoutEntriesInput {
  update: ProjectUpdateWithoutEntriesDataInput;
  create: ProjectCreateWithoutEntriesInput;
}

export interface UserCreateOneWithoutEntriesInput {
  create?: UserCreateWithoutEntriesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutEntriesInput {
  create?: UserCreateWithoutEntriesInput;
  update?: UserUpdateWithoutEntriesDataInput;
  upsert?: UserUpsertWithoutEntriesInput;
  connect?: UserWhereUniqueInput;
}

export interface EntrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EntryWhereInput;
  AND?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
  OR?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
  NOT?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
}

export interface UserUpdateWithoutEntriesDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  role?: Roles;
  projects?: ProjectUpdateManyWithoutUsersInput;
}

export interface EntryUpdateManyMutationInput {
  subject?: String;
  amount?: Float;
  currency?: String;
  entryDate?: DateTimeInput;
  receiptDate?: DateTimeInput;
  receiptNumber?: String;
  receipt?: String;
  comment?: String;
}

export interface EntryUpdateManyWithoutProjectInput {
  create?: EntryCreateWithoutProjectInput[] | EntryCreateWithoutProjectInput;
  delete?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  connect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  disconnect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  update?:
    | EntryUpdateWithWhereUniqueWithoutProjectInput[]
    | EntryUpdateWithWhereUniqueWithoutProjectInput;
  upsert?:
    | EntryUpsertWithWhereUniqueWithoutProjectInput[]
    | EntryUpsertWithWhereUniqueWithoutProjectInput;
  deleteMany?: EntryScalarWhereInput[] | EntryScalarWhereInput;
  updateMany?:
    | EntryUpdateManyWithWhereNestedInput[]
    | EntryUpdateManyWithWhereNestedInput;
}

export interface ProjectUpdateWithoutUsersDataInput {
  name?: String;
  entries?: EntryUpdateManyWithoutProjectInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutUsersInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutUsersDataInput;
}

export interface ProjectUpdateManyWithoutUsersInput {
  create?: ProjectCreateWithoutUsersInput[] | ProjectCreateWithoutUsersInput;
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  update?:
    | ProjectUpdateWithWhereUniqueWithoutUsersInput[]
    | ProjectUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | ProjectUpsertWithWhereUniqueWithoutUsersInput[]
    | ProjectUpsertWithWhereUniqueWithoutUsersInput;
  deleteMany?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  updateMany?:
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput;
}

export interface ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput;
  data: ProjectUpdateManyDataInput;
}

export interface ProjectUpdateManyMutationInput {
  name?: String;
}

export interface ProjectCreateManyWithoutUsersInput {
  create?: ProjectCreateWithoutUsersInput[] | ProjectCreateWithoutUsersInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
}

export interface EntryCreateManyWithoutCreatedByInput {
  create?:
    | EntryCreateWithoutCreatedByInput[]
    | EntryCreateWithoutCreatedByInput;
  connect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
}

export interface ProjectCreateOneWithoutEntriesInput {
  create?: ProjectCreateWithoutEntriesInput;
  connect?: ProjectWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  role: Roles;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Roles>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Roles>>;
}

export interface AggregateEntry {
  count: Int;
}

export interface AggregateEntryPromise
  extends Promise<AggregateEntry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEntrySubscription
  extends Promise<AsyncIterator<AggregateEntry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface EntryEdge {
  node: Entry;
  cursor: String;
}

export interface EntryEdgePromise extends Promise<EntryEdge>, Fragmentable {
  node: <T = EntryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EntryEdgeSubscription
  extends Promise<AsyncIterator<EntryEdge>>,
    Fragmentable {
  node: <T = EntrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Project {
  id: ID_Output;
  name: String;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  entries: <T = FragmentableArray<Entry>>(
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  entries: <T = Promise<AsyncIterator<EntrySubscription>>>(
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EntryConnection {
  pageInfo: PageInfo;
  edges: EntryEdge[];
}

export interface EntryConnectionPromise
  extends Promise<EntryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EntryEdge>>() => T;
  aggregate: <T = AggregateEntryPromise>() => T;
}

export interface EntryConnectionSubscription
  extends Promise<AsyncIterator<EntryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EntryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEntrySubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  role: Roles;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Roles>;
  entries: <T = FragmentableArray<Entry>>(
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  projects: <T = FragmentableArray<Project>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Roles>>;
  entries: <T = Promise<AsyncIterator<EntrySubscription>>>(
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  projects: <T = Promise<AsyncIterator<ProjectSubscription>>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EntryPreviousValues {
  id: ID_Output;
  subject: String;
  amount: Float;
  currency: String;
  entryDate: DateTimeOutput;
  receiptDate: DateTimeOutput;
  receiptNumber: String;
  receipt?: String;
  comment?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EntryPreviousValuesPromise
  extends Promise<EntryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  amount: () => Promise<Float>;
  currency: () => Promise<String>;
  entryDate: () => Promise<DateTimeOutput>;
  receiptDate: () => Promise<DateTimeOutput>;
  receiptNumber: () => Promise<String>;
  receipt: () => Promise<String>;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EntryPreviousValuesSubscription
  extends Promise<AsyncIterator<EntryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Float>>;
  currency: () => Promise<AsyncIterator<String>>;
  entryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  receiptDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  receiptNumber: () => Promise<AsyncIterator<String>>;
  receipt: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EntrySubscriptionPayload {
  mutation: MutationType;
  node: Entry;
  updatedFields: String[];
  previousValues: EntryPreviousValues;
}

export interface EntrySubscriptionPayloadPromise
  extends Promise<EntrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EntryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EntryPreviousValuesPromise>() => T;
}

export interface EntrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EntrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EntrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EntryPreviousValuesSubscription>() => T;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Entry {
  id: ID_Output;
  subject: String;
  amount: Float;
  currency: String;
  entryDate: DateTimeOutput;
  receiptDate: DateTimeOutput;
  receiptNumber: String;
  receipt?: String;
  comment?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EntryPromise extends Promise<Entry>, Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  amount: () => Promise<Float>;
  currency: () => Promise<String>;
  entryDate: () => Promise<DateTimeOutput>;
  receiptDate: () => Promise<DateTimeOutput>;
  receiptNumber: () => Promise<String>;
  project: <T = ProjectPromise>() => T;
  receipt: () => Promise<String>;
  comment: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EntrySubscription
  extends Promise<AsyncIterator<Entry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Float>>;
  currency: () => Promise<AsyncIterator<String>>;
  entryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  receiptDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  receiptNumber: () => Promise<AsyncIterator<String>>;
  project: <T = ProjectSubscription>() => T;
  receipt: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Entry",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "Roles",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/kassenbuch-djv/kassenbuch-djv-prisma/dev`
});
export const prisma = new Prisma();
