// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { User, Entry, Project } from './prisma-client';
import { AuthPayload } from '../types';
import { Context } from '../types';

type Roles = 'Owner' | 'Admin' | 'Employee';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type MeResolver = (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | null | Promise<User | null>;

  export type EntryResolver = (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => Entry | null | Promise<Entry | null>;

  export type UsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | null | Promise<User[] | null>;

  export interface Type {
    me: (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | null | Promise<User | null>;

    entry: (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => Entry | null | Promise<Entry | null>;

    users: (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | null | Promise<User[] | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    firstName: (parent: User) => parent.firstName,
    lastName: (parent: User) => parent.lastName,
    email: (parent: User) => parent.email,
    password: (parent: User) => parent.password,
    role: (parent: User) => parent.role,
  };

  export type IdResolver = (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type FirstNameResolver = (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type LastNameResolver = (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type EmailResolver = (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type PasswordResolver = (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type RoleResolver = (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Roles | Promise<Roles>;

  export type EntriesResolver = (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Entry[] | Promise<Entry[]>;

  export type ProjectsResolver = (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Project[] | Promise<Project[]>;

  export interface Type {
    id: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    firstName: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    lastName: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    email: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    password: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    role: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Roles | Promise<Roles>;

    entries: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Entry[] | Promise<Entry[]>;

    projects: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Project[] | Promise<Project[]>;
  }
}

export namespace EntryResolvers {
  export const defaultResolvers = {
    id: (parent: Entry) => parent.id,
    amount: (parent: Entry) => parent.amount,
    currency: (parent: Entry) => parent.currency,
    comment: (parent: Entry) => (parent.comment === undefined ? null : parent.comment),
    createdAt: (parent: Entry) => parent.createdAt,
    updatedAt: (parent: Entry) => parent.updatedAt,
  };

  export type IdResolver = (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type AmountResolver = (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>;

  export type CurrencyResolver = (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type CommentResolver = (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>;

  export type CreatedByResolver = (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>;

  export type CreatedAtResolver = (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type UpdatedAtResolver = (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type ProjectResolver = (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => Project | Promise<Project>;

  export interface Type {
    id: (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    amount: (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>;

    currency: (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    comment: (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>;

    createdBy: (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>;

    createdAt: (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    updatedAt: (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    project: (parent: Entry, args: {}, ctx: Context, info: GraphQLResolveInfo) => Project | Promise<Project>;
  }
}

export namespace ProjectResolvers {
  export const defaultResolvers = {
    id: (parent: Project) => parent.id,
    name: (parent: Project) => parent.name,
  };

  export type IdResolver = (parent: Project, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type NameResolver = (parent: Project, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type UsersResolver = (parent: Project, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>;

  export type EntriesResolver = (parent: Project, args: {}, ctx: Context, info: GraphQLResolveInfo) => Entry[] | Promise<Entry[]>;

  export interface Type {
    id: (parent: Project, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    name: (parent: Project, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    users: (parent: Project, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>;

    entries: (parent: Project, args: {}, ctx: Context, info: GraphQLResolveInfo) => Entry[] | Promise<Entry[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
    firstName: string | null;
    lastName: string | null;
    projectName: string | null;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
    projectName: string;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export interface Type {
    signup: (parent: undefined, args: ArgsSignup, ctx: Context, info: GraphQLResolveInfo) => AuthPayload | Promise<AuthPayload>;

    login: (parent: undefined, args: ArgsLogin, ctx: Context, info: GraphQLResolveInfo) => AuthPayload | Promise<AuthPayload>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user,
  };

  export type TokenResolver = (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

  export type UserResolver = (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>;

  export interface Type {
    token: (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;

    user: (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Entry: EntryResolvers.Type;
  Project: ProjectResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
}
